#include "imports/stdlib.fc";
#include "op-codes.fc";
#include "utils.fc";
#include "params.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int min_nft_price() asm "100000000 PUSHINT"; ;; 0.1 TON

(int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; trade fee (defined by admin)
        ds~load_msg_addr(), ;; admin address
        ds~load_ref() ;; nft seller code
    );
}

() store_data(int trade_fee, slice admin_address, cell nft_seller_code) impure {
    set_data(
        begin_cell().store_coins(trade_fee).store_slice(admin_address).store_ref(nft_seller_code).end_cell()
    );
}

(int) getForwardAmount(int my_balance, int msg_value) impure inline {
    int forward_amount = msg_value;
    int contract_balance_before = my_balance - msg_value;

    if (contract_balance_before < min_tons_for_storage()) {
        forward_amount = forward_amount - (min_tons_for_storage() - contract_balance_before);
    }

    return forward_amount;
}

(cell, slice) calculateStateInit(cell nft_seller_code, slice buyer_address, slice nft_address) impure inline {
    cell state_init = calculate_nft_seller_state_init(nft_seller_code, my_address(), buyer_address, nft_address);
    slice trade_contract_address = calculate_nft_seller_address(workchain(), state_init);

    return (state_init, trade_contract_address);
}

;; Exception codes:
;; 100 - value sent with create Trade message is not equal to nft_price
;; 101 - value sent with create Trade message is less than trade_fee + min_nft_price
;; 404 - only Trade contract can send this message
;; 500 - only admin can finish trade manually

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cell_slice = in_msg_full.begin_parse();

    int flags = cell_slice~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    (int trade_fee, slice admin_address, cell nft_seller_code) = load_data();

    slice sender_address = cell_slice~load_msg_addr();
    cell_slice~load_msg_addr(); ;; skip dst
    cell_slice~load_coins(); ;; skip value
    cell_slice~skip_bits(1); ;; skip extracurrency collection
    cell_slice~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cell_slice~load_coins(), 3, 2);

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    int forward_amount = getForwardAmount(my_balance, msg_value);

    if (op == 1) { ;; create trade
        int nft_price = in_msg_body~load_coins();

        throw_unless(100, nft_price == msg_value);
        throw_unless(101, msg_value >= trade_fee + min_nft_price());

        slice nft_address = in_msg_body~load_msg_addr();

        (cell state_init, slice nft_seller_address) = calculateStateInit(nft_seller_code, sender_address, nft_address);

        cell msg_body = begin_cell()
                        .store_uint(op::create_trade(), 32)
                        .store_uint(query_id, 64)
                        .store_coins(nft_price)
                        .store_coins(trade_fee)
                        .end_cell();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_seller_address)
                .store_coins(forward_amount)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 0);
    }

    if (op == op::cancel_trade_request()) { ;; Cancel Trade
        slice nft_address = in_msg_body~load_msg_addr();

        (cell state_init, slice nft_seller_address) = calculateStateInit(nft_seller_code, sender_address, nft_address);

        cell msg_body = begin_cell()
                        .store_uint(op::cancel_trade(), 32)
                        .store_uint(query_id, 64)
                        .end_cell();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_seller_address)
                .store_coins(forward_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 0);
    }

    if (op == op::finished_trade_notification()) { ;; Trade finished
        ;; Accept message only from Trade contracts
        slice trade_data_slice = in_msg_body~load_ref().begin_parse();
        trade_data_slice~load_uint(1); ;; skip init?
        trade_data_slice~load_msg_addr(); ;; skip master contract address

        (cell state_init, slice nft_seller_address) = calculateStateInit(nft_seller_code, trade_data_slice~load_msg_addr(), trade_data_slice~load_msg_addr());

        throw_unless(404, equal_slices(nft_seller_address, sender_address));

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(admin_address)
                .store_coins(forward_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("Finished Trade Notification (Enjoy ur fee)");

        send_raw_message(msg.end_cell(), 0);
    }
}


slice calculate_trade_contract_address(slice nft_buyer_address, slice nft_item_address) method_id {
    (int trade_fee, slice admin_address, cell nft_seller_code) = load_data();
    (cell state_init, slice nft_seller_address) = calculateStateInit(nft_seller_code, nft_buyer_address, nft_item_address);

    return nft_seller_address;
}