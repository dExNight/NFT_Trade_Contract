#include "imports/stdlib.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;; Initiated contract means that bid for NFT item is made, but not yet accepted by seller
(int, slice, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    
    int init? = ds~load_uint(1);

    if (~ init?) {
        return (
            init?, ;; initiated trade flag
            ds~load_msg_addr(), ;; master contract address
            ds~load_msg_addr(), ;; nft buyer address
            ds~load_msg_addr(), ;; nft item address
            null() ;; nft price
        );
    }

    return (
        init?,
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_coins()
    );
}

() store_data(int init?, slice master_address, slice nft_buyer_address, slice nft_item_address, int nft_price) impure {
    set_data(
        begin_cell()
        .store_uint(init?, 1)
        .store_slice(master_address)
        .store_slice(nft_buyer_address)
        .store_slice(nft_item_address)
        .store_coins(nft_price)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cell_slice = in_msg_full.begin_parse();

    int flags = cell_slice~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cell_slice~load_msg_addr();

    (int init?, slice master_address, slice nft_buyer_address, slice nft_item_address, int nft_price) = load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    int contract_balance_before = my_balance - msg_value;
    int forward_amount = msg_value;

    if (contract_balance_before < min_tons_for_storage()) {
        forward_amount = forward_amount - (min_tons_for_storage() - contract_balance_before);
    }

    if (op == op::create_trade()) {
        throw_unless(999, equal_slices(sender_address, master_address));
        
        if (init?) {
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_buyer_address)
                .store_coins(forward_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("You've already placed bid. Cancel it first");

            send_raw_message(msg.end_cell(), 0);
            return();
        }

        cell_slice~load_msg_addr(); ;; skip dst
        cell_slice~load_coins(); ;; skip value
        cell_slice~skip_bits(1); ;; skip extracurrency collection
        cell_slice~load_coins(); ;; skip ihr_fee
        int fwd_fee = muldiv(cell_slice~load_coins(), 3, 2);
        
        int nft_price_to_set = in_msg_body~load_coins();
        throw_unless(777, forward_amount >= nft_price_to_set + fwd_fee);

        store_data(1, master_address, nft_buyer_address, nft_item_address, nft_price_to_set);

        return();
    }
    
    if (op == op::ownership_assigned()) {
        throw_unless(555, equal_slices(nft_item_address, sender_address));

        slice previous_owner = in_msg_body~load_msg_addr();

        var send_money_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(previous_owner)
                .store_coins(nft_price)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("You have successfully sold NFT item");

        send_raw_message(send_money_msg.end_cell(), 1);

        ;; TODO send nft to buyer

        var send_nft_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_item_address)
                .store_coins(forward_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("You have successfully sold NFT item");

        send_raw_message(send_nft_msg.end_cell(), 1);


    }
    
}
