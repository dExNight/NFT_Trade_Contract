#include "imports/stdlib.fc";
#include "op-codes.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int nft_forward_amount() asm "10000000 PUSHINT"; ;; 0.01 TON

;; Initiated contract means that bid for NFT item is made, but not yet accepted by seller
(int, slice, slice, slice, int, int, int, slice) load_data() {
    slice ds = get_data().begin_parse();
    
    int init? = ds~load_uint(1);

    slice mc_address = ds~load_msg_addr(); ;; master contract address
    slice nft_buyer_address = ds~load_msg_addr(); ;; nft buyer address
    slice nft_item_address = ds~load_msg_addr(); ;; nft item address

    ifnot (init?) {   
        return (
            init?,
            mc_address,
            nft_buyer_address,
            nft_item_address,
            null(),
            null(),
            null(),
            null()
        );
    }

    int nft_price = ds~load_coins(); ;; nft price
    int trade_fee = ds~load_coins(); ;; trade fee

    cell finilization_cell = ds~load_ref();
    slice fcs = finilization_cell.begin_parse();

    int trade_finalized = fcs~load_uint(1);

    ifnot (trade_finalized) {
        return (
            init?,
            mc_address,
            nft_buyer_address,
            nft_item_address,
            nft_price,
            trade_fee,
            trade_finalized,
            null()
        );
    }

    return (
        init?,
        mc_address,
        nft_buyer_address,
        nft_item_address,
        nft_price,
        trade_fee,
        trade_finalized,
        fcs~load_msg_addr() ;; nft seller address
    );
}

() store_data(int init?, slice master_address, slice nft_buyer_address, slice nft_item_address, int nft_price, int trade_fee, int trade_finilized, slice nft_seller) impure {
    cell finilization_cell = begin_cell().store_uint(trade_finilized, 1).store_slice(nft_seller).end_cell();
    
    set_data(
        begin_cell()
        .store_uint(init?, 1)
        .store_slice(master_address)
        .store_slice(nft_buyer_address)
        .store_slice(nft_item_address)
        .store_coins(nft_price)
        .store_coins(trade_fee)
        .store_ref(finilization_cell)
        .end_cell()
    );
}

() finish_trade(int my_balance, slice ms_address, slice nft_buyer, slice nft_item, int query_id) impure {
    int forward_amount = my_balance - min_tons_for_storage();

    cell initial_data_cell = begin_cell()
        .store_uint(0, 1)
        .store_slice(ms_address)
        .store_slice(nft_buyer)
        .store_slice(nft_item)
        .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(ms_address)
            .store_coins(forward_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::finished_trade_notification(), 32)
            .store_uint(query_id, 64)
            .store_ref(initial_data_cell);

    send_raw_message(msg.end_cell(), 0);

    set_data(
        initial_data_cell
    );
    return();
}

() return_trade_bid(int my_balance, slice ms_address, slice nft_buyer, slice nft_item, int nft_price) impure {
    int forward_amount = min(my_balance - min_tons_for_storage(), nft_price);

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_buyer)
            .store_coins(forward_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
            .store_slice("Trade bid canceled");
    
    send_raw_message(msg.end_cell(), 0);

    set_data(
        begin_cell()
        .store_uint(0, 1)
        .store_slice(ms_address)
        .store_slice(nft_buyer)
        .store_slice(nft_item)
        .end_cell()
    );
    return();
}

(int) getForwardAmount(int my_balance, int msg_value) impure inline {
    int contract_balance_before = my_balance - msg_value;
    int forward_amount = msg_value;

    if (contract_balance_before < min_tons_for_storage()) {
        forward_amount = forward_amount - (min_tons_for_storage() - contract_balance_before);
    }

    return forward_amount;
}

;; Exception codes:
;; 500 - only master contract can use this method
;; 777 - something went wrong (contact admin)
;; 404 - only nft item address can call this method
;; 100 - trade is not initialized yet
;; 200 - trade is already finalized (nft item is alredy transfered to Trade contract)
;; 300 - trade is not finalized yet
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cell_slice = in_msg_full.begin_parse();

    int flags = cell_slice~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cell_slice~load_msg_addr();

    (int init?, slice master_address, slice nft_buyer_address, slice nft_item_address, int nft_price, int trade_fee, int trade_finilized, slice nft_seller) = load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    int forward_amount = getForwardAmount(my_balance, msg_value);

    cell_slice~load_msg_addr(); ;; skip dst
    cell_slice~load_coins(); ;; skip value
    cell_slice~skip_bits(1); ;; skip extracurrency collection
    cell_slice~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cell_slice~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    if (op == op::create_trade()) {
        throw_unless(500, equal_slices(sender_address, master_address));
        
        if (init?) {
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_buyer_address)
                .store_coins(forward_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("You've already placed bid. Cancel it first");

            send_raw_message(msg.end_cell(), 0);
            return();
        }
        
        int nft_price_to_set = in_msg_body~load_coins();
        int trade_fee_to_set = in_msg_body~load_coins();

        throw_unless(777, forward_amount > nft_price_to_set - trade_fee_to_set); ;; это гарантируется

        store_data(1, master_address, nft_buyer_address, nft_item_address, nft_price_to_set, trade_fee_to_set, 0, my_address());

        return();
    }
    
    if (op == op::ownership_assigned()) {
        throw_unless(404, equal_slices(nft_item_address, sender_address));

        throw_unless(100, init?);
        throw_if(200, trade_finilized);

        throw_unless(777, my_balance > nft_price - trade_fee);

        slice previous_owner = in_msg_body~load_msg_addr();

        store_data(1, master_address, nft_buyer_address, nft_item_address, nft_price, trade_fee, 1, previous_owner);

        var msg_body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64) ;; save query id
                .store_slice(nft_buyer_address)
                .store_slice(my_address())
                .store_uint(0, 1)
                .store_coins(nft_forward_amount())
                .store_slice(in_msg_body) ;; to be checked
                .end_cell();
        
        var send_nft_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_item_address)
                .store_coins(my_balance - (nft_price - trade_fee))
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(msg_body);

        send_raw_message(send_nft_msg.end_cell(), 0);

        return();
    }
    
    ;; NFT transfered successfully
    if (op == op::excesses()) {
        throw_unless(404, equal_slices(nft_item_address, sender_address));
        throw_unless(100, init?);
        throw_unless(300, trade_finilized);

        throw_unless(777, my_balance > nft_price - trade_fee);
        
        var send_money_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_seller)
                .store_coins(nft_price - trade_fee)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("You have successfully sold NFT item");

        send_raw_message(send_money_msg.end_cell(), 1);

        finish_trade((my_balance - (nft_price - trade_fee) - fwd_fee), master_address, nft_buyer_address, nft_item_address, query_id);
        return();
    }

    ;; TODO cancel bid
    if (op == op::cancel_trade()) {
        throw_unless(500, equal_slices(sender_address, master_address));
        throw_unless(100, init?);
        throw_if(200, trade_finilized);
        
        return_trade_bid(my_balance, master_address, nft_buyer_address, nft_item_address, nft_price);
        return();
    }

    throw(999);
}

(int, slice, slice, slice, int, int, int, slice) get_trade_data() method_id {
    (int init?, slice master_address, slice nft_buyer_address, slice nft_item_address, int nft_price, int trade_fee, int trade_finilized, slice nft_seller) = load_data();

    return (init?, master_address, nft_buyer_address, nft_item_address, nft_price, trade_fee, trade_finilized, nft_seller);
}